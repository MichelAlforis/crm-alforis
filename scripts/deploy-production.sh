#!/bin/bash

# ===========================================
# SCRIPT DE D√âPLOIEMENT EN PRODUCTION
# CRM Alforis Finance
# ===========================================

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=======================================${NC}"
echo -e "${BLUE}   D√âPLOIEMENT EN PRODUCTION${NC}"
echo -e "${BLUE}   CRM Alforis Finance${NC}"
echo -e "${BLUE}=======================================${NC}\n"

# --- V√©rifications pr√©liminaires ---
echo -e "${YELLOW}üìã V√©rifications pr√©liminaires...${NC}"

# D√©terminer le fichier docker-compose √† utiliser
DEFAULT_COMPOSE_FILE="docker-compose.prod.yml"
FALLBACK_COMPOSE_FILE="docker-compose.yml"

if [ -n "${COMPOSE_FILE_OVERRIDE:-}" ]; then
    COMPOSE_FILE="$COMPOSE_FILE_OVERRIDE"
elif [ -n "${COMPOSE_FILE:-}" ]; then
    COMPOSE_FILE="$COMPOSE_FILE"
elif [ -f "$DEFAULT_COMPOSE_FILE" ]; then
    COMPOSE_FILE="$DEFAULT_COMPOSE_FILE"
elif [ -f "$FALLBACK_COMPOSE_FILE" ]; then
    COMPOSE_FILE="$FALLBACK_COMPOSE_FILE"
else
    COMPOSE_FILE="$DEFAULT_COMPOSE_FILE"
fi

if [ ! -f "$COMPOSE_FILE" ]; then
    echo -e "${RED}‚ùå Erreur: aucun fichier docker-compose trouv√© (recherch√©: $COMPOSE_FILE, $DEFAULT_COMPOSE_FILE, $FALLBACK_COMPOSE_FILE)${NC}"
    echo -e "${RED}   √ätes-vous dans le bon r√©pertoire ?${NC}"
    exit 1
fi

if [ "$COMPOSE_FILE" = "$FALLBACK_COMPOSE_FILE" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Utilisation de $COMPOSE_FILE (fallback). Pensez √† conserver un fichier $DEFAULT_COMPOSE_FILE si possible.${NC}"
fi

DEFAULT_ENV_FILE=".env.production"
FALLBACK_ENV_FILE=".env"

if [ -n "${ENV_FILE_OVERRIDE:-}" ]; then
    ROOT_ENV_FILE="$ENV_FILE_OVERRIDE"
elif [ -f "$DEFAULT_ENV_FILE" ]; then
    ROOT_ENV_FILE="$DEFAULT_ENV_FILE"
elif [ -f "$FALLBACK_ENV_FILE" ]; then
    ROOT_ENV_FILE="$FALLBACK_ENV_FILE"
else
    ROOT_ENV_FILE=""
fi

if [ -z "$ROOT_ENV_FILE" ]; then
    echo -e "${RED}‚ùå Aucun fichier d'environnement trouv√© (recherch√©: $DEFAULT_ENV_FILE et $FALLBACK_ENV_FILE)${NC}"
    echo -e "${YELLOW}   Cr√©ez-le √† partir de .env.production.example${NC}"
    exit 1
fi

if [ "$ROOT_ENV_FILE" = "$FALLBACK_ENV_FILE" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Utilisation de $ROOT_ENV_FILE (fallback). Assurez-vous que $COMPOSE_FILE l'utilise.${NC}"
fi

ENV_FILENAME=$(basename "$ROOT_ENV_FILE")
ENV_FILE_VALUE="$ROOT_ENV_FILE"
export COMPOSE_ENV_FILE="$ENV_FILE_VALUE"

# V√©rifier que Docker est install√©
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
    exit 1
fi

# V√©rifier la disponibilit√© de docker compose (v1 ou plugin v2)
if command -v docker-compose &> /dev/null; then
    COMPOSE_CMD=(docker-compose)
    COMPOSE_CMD_STRING="docker-compose"
elif docker compose version &> /dev/null; then
    COMPOSE_CMD=(docker compose)
    COMPOSE_CMD_STRING="docker compose"
else
    echo -e "${RED}‚ùå docker-compose (ou le plugin docker compose) n'est pas install√©${NC}"
    exit 1
fi

# V√©rifier les fichiers .env
if [ ! -f "$ROOT_ENV_FILE" ]; then
    echo -e "${RED}‚ùå Fichier $ROOT_ENV_FILE introuvable${NC}"
    echo -e "${YELLOW}   Cr√©ez-le √† partir de .env.production.example${NC}"
    exit 1
fi

if [ ! -f "crm-backend/.env.production.local" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Fichier crm-backend/.env.production.local introuvable${NC}"
    echo -e "${YELLOW}   Cr√©ez-le √† partir de crm-backend/.env.production.example${NC}"
    read -p "Continuer quand m√™me ? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

if [ ! -f "crm-frontend/.env.production.local" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Fichier crm-frontend/.env.production.local introuvable${NC}"
    echo -e "${YELLOW}   Cr√©ez-le √† partir de crm-frontend/.env.production.example${NC}"
    read -p "Continuer quand m√™me ? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ V√©rifications pr√©liminaires OK${NC}\n"

# --- Demander confirmation ---
echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: Vous √™tes sur le point de d√©ployer en PRODUCTION${NC}"
read -p "√ätes-vous s√ªr de vouloir continuer ? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${RED}‚ùå D√©ploiement annul√©${NC}"
    exit 1
fi

# --- Backup de la base de donn√©es (si elle existe) ---
echo -e "\n${YELLOW}üíæ Backup de la base de donn√©es...${NC}"
if "${COMPOSE_CMD[@]}" -f "$COMPOSE_FILE" ps postgres | grep -q "Up"; then
    BACKUP_FILE="backups/backup_$(date +%Y%m%d_%H%M%S).sql"
    mkdir -p backups

    "${COMPOSE_CMD[@]}" -f "$COMPOSE_FILE" exec -T postgres pg_dump -U crm_user crm_db > "$BACKUP_FILE" 2>/dev/null || true

    if [ -f "$BACKUP_FILE" ]; then
        echo -e "${GREEN}‚úÖ Backup cr√©√©: $BACKUP_FILE${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Aucun backup cr√©√© (base de donn√©es vide ou inexistante)${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Base de donn√©es non trouv√©e, pas de backup${NC}"
fi

# --- Arr√™ter les conteneurs existants ---
echo -e "\n${YELLOW}üõë Arr√™t des conteneurs existants...${NC}"
"${COMPOSE_CMD[@]}" -f "$COMPOSE_FILE" down

# --- Pull des derni√®res images ---
echo -e "\n${YELLOW}üì• Pull des derni√®res images...${NC}"
"${COMPOSE_CMD[@]}" -f "$COMPOSE_FILE" pull || true

# --- Build des images ---
echo -e "\n${YELLOW}üî® Build des images...${NC}"
"${COMPOSE_CMD[@]}" -f "$COMPOSE_FILE" build --no-cache

# --- D√©marrer les services ---
echo -e "\n${YELLOW}üöÄ D√©marrage des services...${NC}"
"${COMPOSE_CMD[@]}" -f "$COMPOSE_FILE" up -d

# --- Attendre que les services soient pr√™ts ---
echo -e "\n${YELLOW}‚è≥ Attente du d√©marrage des services...${NC}"
sleep 10

# --- V√©rifier l'√©tat des services ---
echo -e "\n${YELLOW}üîç V√©rification de l'√©tat des services...${NC}"
"${COMPOSE_CMD[@]}" -f "$COMPOSE_FILE" ps

# --- Appliquer les migrations ---
echo -e "\n${YELLOW}üóÑÔ∏è  Application des migrations de base de donn√©es...${NC}"
"${COMPOSE_CMD[@]}" -f "$COMPOSE_FILE" exec -T api alembic upgrade head || echo -e "${YELLOW}‚ö†Ô∏è  Migrations non appliqu√©es (alembic peut ne pas √™tre configur√©)${NC}"

# --- Tests de connectivit√© ---
echo -e "\n${YELLOW}üß™ Tests de connectivit√©...${NC}"

# Test API Health
if curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ API Backend accessible (http://localhost:8000/health)${NC}"
else
    echo -e "${RED}‚ùå API Backend non accessible${NC}"
fi

# Test Frontend
if curl -f -s http://localhost:3010 > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Frontend accessible (http://localhost:3010)${NC}"
else
    echo -e "${RED}‚ùå Frontend non accessible${NC}"
fi

# --- Health Checks complets ---
echo -e "\n${YELLOW}üè• Health Checks complets...${NC}"
if [ -f "scripts/health-check/run_health_check.sh" ]; then
    chmod +x scripts/health-check/run_health_check.sh
    # D√©terminer l'environnement (production ou local selon le compose file)
    if [[ "$COMPOSE_FILE" == *"prod"* ]]; then
        HEALTH_ENV="production"
    else
        HEALTH_ENV="local"
    fi

    echo -e "${BLUE}Lancement des health checks en mode ${HEALTH_ENV}...${NC}"
    ./scripts/health-check/run_health_check.sh "$HEALTH_ENV" || echo -e "${YELLOW}‚ö†Ô∏è  Certains health checks ont √©chou√© (voir d√©tails ci-dessus)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Scripts de health check non trouv√©s (scripts/health-check/)${NC}"
fi

# --- Afficher les logs r√©cents ---
echo -e "\n${YELLOW}üìã Logs r√©cents:${NC}"
"${COMPOSE_CMD[@]}" -f "$COMPOSE_FILE" logs --tail=20

# --- R√©sum√© final ---
echo -e "\n${BLUE}=======================================${NC}"
echo -e "${GREEN}‚úÖ D√âPLOIEMENT TERMIN√â${NC}"
echo -e "${BLUE}=======================================${NC}\n"

echo -e "${GREEN}Services d√©ploy√©s:${NC}"
echo -e "  ‚Ä¢ API Backend:  http://localhost:8000"
echo -e "  ‚Ä¢ Frontend:     http://localhost:3010"
echo -e "  ‚Ä¢ Swagger UI:   http://localhost:8000/docs"
echo -e "  ‚Ä¢ Health Check: http://localhost:8000/health"

echo -e "\n${YELLOW}Prochaines √©tapes:${NC}"
echo -e "  1. V√©rifier que Nginx est configur√© (voir nginx/crm.alforis.fr.conf)"
echo -e "  2. Obtenir un certificat SSL avec certbot"
echo -e "  3. Tester l'acc√®s via https://crm.alforis.fr"
echo -e "  4. V√©rifier les logs: ${BLUE}$COMPOSE_CMD_STRING -f $COMPOSE_FILE logs -f${NC}"

echo -e "\n${GREEN}Commandes utiles:${NC}"
echo -e "  ‚Ä¢ Voir les logs:      ${BLUE}$COMPOSE_CMD_STRING -f $COMPOSE_FILE logs -f${NC}"
echo -e "  ‚Ä¢ Voir l'√©tat:        ${BLUE}$COMPOSE_CMD_STRING -f $COMPOSE_FILE ps${NC}"
echo -e "  ‚Ä¢ Red√©marrer:         ${BLUE}$COMPOSE_CMD_STRING -f $COMPOSE_FILE restart${NC}"
echo -e "  ‚Ä¢ Arr√™ter:            ${BLUE}$COMPOSE_CMD_STRING -f $COMPOSE_FILE down${NC}"

echo ""
