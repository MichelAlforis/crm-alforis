#!/bin/bash
# ===========================================
# Script de diagnostic : Stabilit√© Uvicorn
# ===========================================
# V√©rifie que le reload ne se d√©clenche pas de mani√®re intempestive

set -euo pipefail

cd "$(dirname "$0")/.."

echo "üîç Diagnostic de stabilit√© Uvicorn"
echo "=================================="
echo ""

# 1. V√©rifier que le conteneur tourne
echo "1Ô∏è‚É£  √âtat du conteneur API"
if ! docker compose ps api | grep -q "Up"; then
    echo "   ‚ùå Le conteneur API n'est pas d√©marr√©"
    exit 1
fi
echo "   ‚úÖ Conteneur UP"
echo ""

# 2. V√©rifier RestartCount
echo "2Ô∏è‚É£  Restart Count (doit √™tre 0)"
RESTART_COUNT=$(docker inspect v1-api-1 --format='{{.RestartCount}}')
if [ "$RESTART_COUNT" -eq 0 ]; then
    echo "   ‚úÖ RestartCount = $RESTART_COUNT"
else
    echo "   ‚ö†Ô∏è  RestartCount = $RESTART_COUNT (le conteneur a red√©marr√©)"
fi
echo ""

# 3. V√©rifier la commande active
echo "3Ô∏è‚É£  Commande Uvicorn active"
docker inspect -f '{{json .Config.Cmd}}' v1-api-1 | python3 -c "
import sys, json
cmd = json.load(sys.stdin)
excludes = [arg for arg in cmd if '--reload-exclude' in ' '.join(cmd[max(0, cmd.index(arg)-1):cmd.index(arg)+2])]
print(f'   Exclusions configur√©es: {len(excludes)}')
if len(excludes) >= 8:
    print('   ‚úÖ Toutes les exclusions sont pr√©sentes')
else:
    print(f'   ‚ö†Ô∏è  Seulement {len(excludes)} exclusions trouv√©es (attendu: 10)')
"
echo ""

# 4. V√©rifier les d√©marrages r√©cents
echo "4Ô∏è‚É£  Activit√© reload (derni√®res 60s)"
RECENT_STARTS=0
if docker compose logs --since 65s api 2>&1 | grep -q "Started server process"; then
    RECENT_STARTS=$(docker compose logs --since 65s api 2>&1 | grep "Started server process" | wc -l | xargs)
fi

case "$RECENT_STARTS" in
    0)
        echo "   ‚úÖ Aucun reload d√©tect√©"
        ;;
    1)
        echo "   ‚ÑπÔ∏è  1 d√©marrage (normal si conteneur vient d'√™tre cr√©√©)"
        ;;
    *)
        echo "   ‚ö†Ô∏è  $RECENT_STARTS d√©marrages (reload intempestif d√©tect√©!)"
        echo ""
        echo "   Derniers logs:"
        docker compose logs --tail=20 api | grep -E "(Started|Shutting|Will watch|detected)" | tail -10
        ;;
esac
echo ""

# 5. V√©rifier le healthcheck
echo "5Ô∏è‚É£  Healthcheck API"
if curl -sf http://localhost:8000/api/v1/health > /dev/null 2>&1; then
    echo "   ‚úÖ API r√©pond correctement"
else
    echo "   ‚ùå API ne r√©pond pas"
    exit 1
fi
echo ""

# 6. V√©rifier l'override
echo "6Ô∏è‚É£  Configuration override macOS"
if [ -f "docker-compose.override.yml" ]; then
    echo "   ‚úÖ docker-compose.override.yml pr√©sent"
    if grep -q "reload-exclude" docker-compose.override.yml; then
        echo "   ‚úÖ Exclusions configur√©es dans l'override"
    else
        echo "   ‚ö†Ô∏è  Pas d'exclusions dans l'override"
    fi
else
    echo "   ‚ö†Ô∏è  docker-compose.override.yml absent (reloads possibles)"
fi
echo ""

# 7. Test de stabilit√© (optionnel)
if [ "${1:-}" = "--monitor" ]; then
    echo "7Ô∏è‚É£  Monitoring en temps r√©el (30s)"
    echo "   Appuyez sur Ctrl+C pour arr√™ter"
    echo ""
    START_TIME=$(date +%s)
    docker compose logs --follow api &
    LOGS_PID=$!
    sleep 30
    kill $LOGS_PID 2>/dev/null || true

    END_TIME=$(date +%s)
    ELAPSED=$((END_TIME - START_TIME))
    RELOADS=$(docker compose logs --since ${ELAPSED}s api 2>&1 | grep -c "Started server process" || echo 0)

    echo ""
    echo "   Reloads d√©tect√©s sur $ELAPSED s: $RELOADS"
    if [ "$RELOADS" -eq 0 ]; then
        echo "   ‚úÖ Syst√®me stable"
    else
        echo "   ‚ö†Ô∏è  Reloads intempestifs d√©tect√©s"
    fi
fi

echo ""
echo "=================================="
echo "‚úÖ Diagnostic termin√©"
echo ""
echo "Commandes utiles:"
echo "  - Voir les logs:     docker compose logs -f api"
echo "  - Red√©marrer:        docker compose restart api"
echo "  - Rebuild complet:   docker compose up -d --force-recreate api"
echo "  - Monitor 30s:       $0 --monitor"
