name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/*
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop
  workflow_dispatch:

# Annuler les runs en cours si nouveau push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  POETRY_VERSION: "1.7.1"

jobs:
  # ============================================================================
  # 🔍 LINT & FORMAT - Backend
  # ============================================================================
  lint-backend:
    name: 🐍 Lint Backend (Python)
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: crm-backend/requirements.txt

      - name: 📦 Install linting tools
        run: |
          pip install black==24.10.0 flake8==7.0.0 mypy==1.8.0 isort==5.13.2

      - name: 🎨 Check formatting (black)
        run: |
          cd crm-backend
          black --check --diff .

      - name: 📏 Lint with flake8
        run: |
          cd crm-backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-line-length=120 --statistics --exclude=venv,.venv,temp-venv,.venv312

      - name: 🔍 Sort imports (isort)
        run: |
          cd crm-backend
          isort --check-only --diff .

      - name: 🏷️ Type check (mypy)
        run: |
          cd crm-backend
          mypy . --ignore-missing-imports --exclude='(venv|\.venv|temp-venv|\.venv312)' || true

  # ============================================================================
  # 🔍 LINT & FORMAT - Frontend
  # ============================================================================
  lint-frontend:
    name: ⚛️ Lint Frontend (TypeScript)
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: crm-frontend/package-lock.json

      - name: 📥 Install dependencies
        run: |
          cd crm-frontend
          npm ci

      - name: 🎨 Lint with ESLint (strict on errors)
        run: |
          cd crm-frontend
          npm run lint -- --max-warnings=999

      - name: 🏷️ Type check
        run: |
          cd crm-frontend
          npx tsc --noEmit

      - name: 💅 Check formatting (Prettier)
        run: |
          cd crm-frontend
          npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md}"

  # ============================================================================
  # 🧪 TESTS - Backend
  # ============================================================================
  test-backend:
    name: 🧪 Tests Backend
    runs-on: ubuntu-latest
    needs: [lint-backend]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: crm_user
          POSTGRES_PASSWORD: crm_test_password
          POSTGRES_DB: crm_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: crm-backend/requirements.txt

      - name: 📦 Install dependencies
        run: |
          cd crm-backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock httpx

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://crm_user:crm_test_password@localhost:5432/crm_test
        run: |
          cd crm-backend
          # Run migrations
          alembic upgrade head || true

      - name: 🧪 Run tests with coverage
        env:
          DATABASE_URL: postgresql://crm_user:crm_test_password@localhost:5432/crm_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_for_ci_cd_only_not_for_production
          SENTRY_DSN: ""
          DEBUG: "false"
        run: |
          cd crm-backend
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing -v

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./crm-backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: 📈 Coverage Report
        run: |
          cd crm-backend
          coverage report --fail-under=70

  # ============================================================================
  # 🧪 TESTS - Frontend
  # ============================================================================
  test-frontend:
    name: ⚛️ Tests Frontend
    runs-on: ubuntu-latest
    needs: [lint-frontend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: crm-frontend/package-lock.json

      - name: 📥 Install dependencies
        run: |
          cd crm-frontend
          npm ci

      - name: 🧪 Run tests
        run: |
          cd crm-frontend
          npm run test -- --coverage --watchAll=false

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./crm-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # ============================================================================
  # 📊 SONARQUBE ANALYSIS
  # ============================================================================
  sonarqube:
    name: 📊 SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: 📊 SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=alforis-crm
            -Dsonar.python.coverage.reportPaths=crm-backend/coverage.xml
            -Dsonar.javascript.lcov.reportPaths=crm-frontend/coverage/lcov.info
            -Dsonar.sources=crm-backend,crm-frontend
            -Dsonar.exclusions=**/*test*/**,**/node_modules/**,**/venv/**

      - name: 🚦 Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: true

  # ============================================================================
  # 🔒 SECURITY SCAN
  # ============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner (HIGH/CRITICAL only)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '0'

      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # 🐳 BUILD DOCKER IMAGES
  # ============================================================================
  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, sonarqube]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    strategy:
      matrix:
        service: [api, frontend, worker]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/alforis-crm-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # ============================================================================
  # 🚀 DEPLOY TO STAGING
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.crm.alforis.fr

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST_STAGING }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app/crm
            docker-compose pull
            docker-compose up -d --no-build
            docker-compose exec -T api alembic upgrade head

      - name: 🔔 Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "✅ Staging deployed: ${{ github.event.head_commit.message }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment* 🚀\n\n*Status:* ${{ job.status }}\n*Commit:* <${{ github.event.head_commit.url }}|${{ github.event.head_commit.message }}>\n*Author:* ${{ github.event.head_commit.author.name }}"
                  }
                }
              ]
            }

  # ============================================================================
  # 🎉 SUCCESS SUMMARY
  # ============================================================================
  summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint-backend, lint-frontend, test-backend, test-frontend, sonarqube, security]
    if: always()

    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 🎯 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint Backend | ${{ needs.lint-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint Frontend | ${{ needs.lint-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Backend | ${{ needs.test-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Frontend | ${{ needs.test-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SonarQube | ${{ needs.sonarqube.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
