#!/usr/bin/env python3
"""
Script pour initialiser une base de donn√©es propre avec l'architecture unifi√©e
"""
import sys
from pathlib import Path

# Ajouter le chemin parent pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.database import Base, engine
from models.email import EmailCampaign, EmailSend, EmailTemplate
from models.kpi import DashboardKPI
from models.mandat import Mandat
from models.notification import Notification

# Import de TOUS les mod√®les (architecture unifi√©e uniquement)
from models.organisation import (
    Organisation,
    OrganisationActivity,
    OrganisationContact,
    OrganisationInteraction,
)
from models.permission import Permission
from models.person import Person, PersonOrganizationLink
from models.role import Role
from models.task import Task
from models.user import User
from models.webhook import Webhook
from models.workflow import Workflow, WorkflowExecution


def init_database():
    """Cr√©er toutes les tables"""
    print("üèóÔ∏è  Cr√©ation des tables (architecture unifi√©e)...")

    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables cr√©√©es avec succ√®s !")

        # Lister les tables cr√©√©es
        from sqlalchemy import inspect
        inspector = inspect(engine)
        tables = inspector.get_table_names()

        print(f"\nüìä {len(tables)} tables cr√©√©es :")
        for table in sorted(tables):
            print(f"  ‚úÖ {table}")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables : {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = init_database()
    sys.exit(0 if success else 1)
